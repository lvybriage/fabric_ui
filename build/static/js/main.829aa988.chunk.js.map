{"version":3,"sources":["components/Nav.tsx","App.tsx","components/Overview.tsx","components/TrialsDetail.tsx","serviceWorker.ts","index.tsx"],"names":["Nav","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react","React","App","components_Nav","children","Overview","TrialsDetail","Boolean","window","location","hostname","match","createBrowserHistory","ReactDOM","render","react_default","a","createElement","react_router","path","component","to","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAeeA,cAZX,SAAAA,EAAYC,GAAY,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACdH,0EAKN,OACIO,EAAA,sDARMC,aCmBHC,qBAfX,SAAAA,EAAYT,GAAY,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAM,GAAAR,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAQ,GAAAH,KAAAH,KACdH,0EAKN,OACIO,EAAA,yBACIA,EAAA,cAACG,EAAD,MACCP,KAAKH,MAAMW,iBAXVH,4BCWHI,cAZX,SAAAA,EAAYZ,GAAY,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAS,GAAAX,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAW,GAAAN,KAAAH,KACdH,0EAKN,OACIO,EAAA,iDARWC,aCaRK,cAZX,SAAAA,EAAYb,GAAY,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAU,GAAAZ,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAY,GAAAP,KAAAH,KACdH,0EAKN,OACIO,EAAA,sDAReC,mBCUPM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCLUC,cAYhBC,IAASC,OAELC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWlB,GACzBa,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUG,GAAG,WAEbN,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAWf,IAChCU,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,KAAK,UAAUC,UAAWd,MAsBvCgB,SAASC,eAAe,SDmFpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.829aa988.chunk.js","sourcesContent":["import * as React from 'react';\n\nclass Nav extends React.Component<{}, {}> {\n    constructor(props: {}) {\n        super(props);\n    }\n\n    render() {\n\n        return (\n            <div>Trial details page</div>\n        );\n    }\n};\n\nexport default Nav;","import * as React from 'react';\nimport Nav from './components/Nav';\nimport './App.css';\n\nclass App extends React.Component<{}, {}> {\n\n    constructor(props: {}) {\n        super(props);\n    }\n\n    render() {\n        \n        return (\n            <div>\n                <Nav />\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n\n","import * as React from 'react';\n\nclass Overview extends React.Component<{}, {}> {\n    constructor(props: {}) {\n        super(props);\n    }\n\n    render() {\n\n        return (\n            <div>Overview page</div>\n        );\n    }\n};\n\nexport default Overview;\n","import * as React from 'react';\n\nclass TrialsDetail extends React.Component<{}, {}> {\n    constructor(props: {}) {\n        super(props);\n    }\n\n    render() {\n\n        return (\n            <div>Trial details page</div>\n        );\n    }\n};\n\nexport default TrialsDetail;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import { FluentCustomizations } from '@uifabric/fluent-theme';\n// import { Customizer, mergeStyles } from 'office-ui-fabric-react';\n// import { Router, Route, browserHistory, IndexRedirect } from 'react-router';\n// import { Router, Route, StaticRouter,  } from 'react-router';\nimport { Router, Route, Redirect, StaticRouter } from 'react-router';\nimport { createBrowserHistory } from 'history';\nimport Overview from './components/Overview';\nimport TrialsDetail from './components/TrialsDetail';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nconst history = createBrowserHistory();\n// Inject some global styles\n// mergeStyles({\n//   selectors: {\n//     ':global(body), :global(html), :global(#root)': {\n//       margin: 0,\n//       padding: 0,\n//       height: '100vh'\n//     }\n//   }\n// });\n\nReactDOM.render(\n  (\n    <StaticRouter>\n      <Route path=\"/\" component={App}>\n        <Redirect to=\"/oview\" />\n        {/* <IndexRedirect to=\"/oview\" /> */}\n        <Route path=\"/oview\" component={Overview} />\n        <Route path=\"/detail\" component={TrialsDetail} />\n      </Route>\n    </StaticRouter>\n\n    // <Router history={browserHistory}>\n    //   <Route path=\"/\" component={App}>\n    //     {/* <Redirect to=\"/oview\" /> */}\n    //     <IndexRedirect to=\"/oview\" />\n    //     <Route path=\"/oview\" component={Overview} />\n    //     <Route path=\"/detail\" component={TrialsDetail} />\n    //   </Route>\n    // </Router>\n\n    // <Router history={history}>\n    //   <Route path=\"/\" component={App}>\n    //     <Redirect to=\"/oview\" />\n    //     {/* <IndexRedirect to=\"/oview\" /> */}\n    //     <Route path=\"/oview\" component={Overview} />\n    //     <Route path=\"/detail\" component={TrialsDetail} />\n    //   </Route>\n    // </Router>\n  ),\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}